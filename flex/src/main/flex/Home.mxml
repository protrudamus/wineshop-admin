<?xml version="1.0" encoding="utf-8"?>

<!--
  GRANITE DATA SERVICES
  Copyright (C) 2011 GRANITE DATA SERVICES S.A.S.

  This file is part of Granite Data Services.

  Granite Data Services is free software; you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation; either version 3 of the License, or (at your
  option) any later version.

  Granite Data Services is distributed in the hope that it will be useful, but
  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License
  for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with this library; if not, see <http://www.gnu.org/licenses/>.
-->

<s:VGroup
	xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:mx="library://ns.adobe.com/flex/mx"
    xmlns:v="org.granite.validation.*"
	xmlns:e="com.wineshop.entities.*"
    xmlns="*"
    width="100%" height="100%"
	initialize="selectVineyard(new Vineyard())">

	<fx:Metadata>[Name]</fx:Metadata>
   	
    <fx:Script>
        <![CDATA[
			import mx.data.utils.Managed;
            import mx.collections.ArrayCollection;
            
			import org.granite.tide.spring.Spring;
			import org.granite.tide.spring.Context;
			import org.granite.tide.collections.PagedQuery;
            import org.granite.tide.events.TideResultEvent;
            import org.granite.tide.events.TideFaultEvent;
            
            import com.wineshop.entities.Vineyard;
			import com.wineshop.entities.Wine;
			import com.wineshop.entities.Wine$Type;
            import com.wineshop.services.WineshopService;

			Spring.getInstance().addComponentWithFactory("vineyards", PagedQuery, 
				{ filterClass: Vineyard, elementClass: Vineyard, remoteComponentClass: WineshopService, methodName: "list", maxResults: 12 }
			);
			
			[Inject] [Bindable]
			public var tideContext:Context;
			
			[In] [Bindable]
			public var vineyards:PagedQuery;
			
            [Inject]
            public var wineshopService:WineshopService;
			
			private function save():void {
				if (formValidator.validateEntity())
					wineshopService.save(vineyard);
			}
			
			private function remove():void {
				wineshopService.remove(vineyard.id, function(event:TideResultEvent):void {
					selectVineyard(null);
				});
			}
			
			private function selectVineyard(vineyard:Vineyard):void {
				Managed.resetEntity(this.vineyard);
				tideContext.vineyard = this.vineyard = vineyard;
				vineyardsList.selectedItem = vineyard;
			}
        ]]>
    </fx:Script>
	
	<fx:Declarations>		
		<e:Vineyard id="vineyard"/>
		
		<s:ArrayCollection id="wineTypes" source="{Wine$Type.constants}"/>
		
		<v:FormValidator id="formValidator" entity="{vineyard}" form="{formVineyard}"/>
	</fx:Declarations>
    
	<s:VGroup paddingLeft="10" paddingRight="10" paddingTop="10" paddingBottom="10" width="800">
		<s:HGroup id="filter">
			<s:TextInput id="filterName" text="@{vineyards.filter.name}"/>
			<s:Button id="search" label="Search" click="vineyards.refresh()"/>
		</s:HGroup>
		
		<s:List id="vineyardsList" labelField="name" width="100%" height="200"
				change="selectVineyard(vineyardsList.selectedItem)">
			<s:dataProvider><s:AsyncListView list="{vineyards}"/></s:dataProvider>
		</s:List>
		
		<s:Button id="newVineyard" label="New" click="selectVineyard(new Vineyard())"/>
	</s:VGroup>
	
	<s:VGroup paddingLeft="10" paddingRight="10" paddingTop="10" paddingBottom="10" width="800">
		<s:Form id="formVineyard">
			<s:FormHeading label="{isNaN(vineyard.id) ? 'Create vineyard' : 'Edit vineyard'}"/>			
			<s:FormItem label="Name">
				<s:TextInput id="formName" text="@{vineyard.name}"/>
			</s:FormItem>
			<s:FormItem label="Wines">
				<s:HGroup gap="10">
					<s:List id="formWines" dataProvider="{vineyard.wines}">
						<s:itemRenderer>
							<fx:Component>
								<s:ItemRenderer>
									<fx:Declarations>
										<v:FormValidator id="wineValidator" form="{wineEdit}" entity="{data}"/>
									</fx:Declarations>
									
									<s:states>
										<s:State name="normal"/>
									</s:states>                   
									<s:HGroup id="wineEdit">
										<s:TextInput text="@{data.name}"/>
										<s:TextInput text="@{data.year}"/>
										<s:DropDownList selectedItem="@{data.type}" requireSelection="true" 
														dataProvider="{outerDocument.wineTypes}" labelField="name"/>
									</s:HGroup>
								</s:ItemRenderer>							
							</fx:Component>
						</s:itemRenderer>					
					</s:List>				
					
					<s:VGroup gap="10">
						<s:Button label="+" click="vineyard.wines.addItem(new Wine(vineyard))"/>
						<s:Button label="-" enabled="{Boolean(formWines.selectedItem)}" click="vineyard.wines.removeItemAt(formWines.selectedIndex)"/>
					</s:VGroup>
				</s:HGroup>
			</s:FormItem>
			<s:FormItem>
				<s:HGroup>
					<s:Button id="saveVineyard" label="Save"
							  enabled="{tideContext.meta_dirty}" click="save()"/>					
					<s:Button id="removeVineyard" label="Remove"
							  enabled="{!isNaN(vineyard.id)}" click="remove()"/>
				</s:HGroup>
			</s:FormItem>
		</s:Form>
	</s:VGroup>

</s:VGroup>
